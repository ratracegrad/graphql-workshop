(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{317:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("Filesystem streams based on "),s("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[t._v("minipass"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("4 classes are exported:")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("The async versions work much like their node builtin counterparts,\nwith the exception of introducing significantly less Stream machinery\noverhead.")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("It's just streams, you pipe them or read() them or write() to them.")]),t._v(" "),t._m(5),t._m(6),t._v(" "),s("p",[t._v("Path string is required, but somewhat irrelevant if an open file\ndescriptor is passed in as an option.")]),t._v(" "),s("p",[t._v("Options:")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("Path string is required, but somewhat irrelevant if an open file\ndescriptor is passed in as an option.")]),t._v(" "),s("p",[t._v("Options:")]),t._v(" "),t._m(9)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"fs-minipass"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fs-minipass","aria-hidden":"true"}},[this._v("#")]),this._v(" fs-minipass")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("ReadStream")]),this._v(" "),e("li",[this._v("ReadStreamSync")]),this._v(" "),e("li",[this._v("WriteStream")]),this._v(" "),e("li",[this._v("WriteStreamSync")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When using "),e("code",[this._v("ReadStreamSync")]),this._v(", all of the data is made available\nimmediately upon consuming the stream.  Nothing is buffered in memory\nwhen the stream is constructed.  If the stream is piped to a writer,\nthen it will synchronously "),e("code",[this._v("read()")]),this._v(" and emit data into the writer as\nfast as the writer can consume it.  (That is, it will respect\nbackpressure.)  If you call "),e("code",[this._v("stream.read()")]),this._v(" then it will read the\nentire file and return the contents.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When using "),e("code",[this._v("WriteStreamSync")]),this._v(", every write is flushed to the file\nsynchronously.  If your writes all come in a single tick, then it'll\nwrite it all out in a single tick.  It's as synchronous as you are.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[this._v("#")]),this._v(" USAGE")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs-minipass'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readStream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("fsm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" writeStream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("fsm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'output.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwriteStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some file header or whatever\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nreadStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("writeStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"readstream-path-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readstream-path-options","aria-hidden":"true"}},[this._v("#")]),this._v(" ReadStream(path, options)")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" Pass in a numeric file descriptor, if the file is already open.")]),t._v(" "),s("li",[s("code",[t._v("readSize")]),t._v(" The size of reads to do, defaults to 16MB")]),t._v(" "),s("li",[s("code",[t._v("size")]),t._v(" The size of the file, if known.  Prevents zero-byte read()\ncall at the end.")]),t._v(" "),s("li",[s("code",[t._v("autoClose")]),t._v(" Set to "),s("code",[t._v("false")]),t._v(" to prevent the file descriptor from being\nclosed when the file is done being read.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"writestream-path-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writestream-path-options","aria-hidden":"true"}},[this._v("#")]),this._v(" WriteStream(path, options)")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" Pass in a numeric file descriptor, if the file is already open.")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" The mode to create the file with. Defaults to "),s("code",[t._v("0o666")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("start")]),t._v(" The position in the file to start reading.  If not\nspecified, then the file will start writing at position zero, and be\ntruncated by default.")]),t._v(" "),s("li",[s("code",[t._v("autoClose")]),t._v(" Set to "),s("code",[t._v("false")]),t._v(" to prevent the file descriptor from being\nclosed when the stream is ended.")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" Flags to use when opening the file.  Irrelevant if "),s("code",[t._v("fd")]),t._v(" is\npassed in, since file won't be opened in that case.  Defaults to\n"),s("code",[t._v("'a'")]),t._v(" if a "),s("code",[t._v("pos")]),t._v(" is specified, or "),s("code",[t._v("'w'")]),t._v(" otherwise.")])])}],!1,null,null,null);e.default=n.exports}}]);
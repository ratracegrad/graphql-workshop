(window.webpackJsonp=window.webpackJsonp||[]).push([[426],{592:function(e,n,o){"use strict";o.r(n);var t=o(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{staticClass:"content"},[o("h3",{attrs:{id:"version-0-4-0-2015-11-12"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#version-0-4-0-2015-11-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Version 0.4.0 (2015-11-12)")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Changed: sourceMappingURL comments used to be matched only when placed at\nthe end of the script. However, since several commonly used JavaScript\nlibraries do not follow this convention and all popular web browsers accept\nnon-trailing comments, this has been revised.")]),e._v(" "),o("p",[e._v("So now non-trailing SourceMappingURL comments are matched as well.")])])]),e._v(" "),o("h3",{attrs:{id:"version-0-3-0-2014-08-16"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#version-0-3-0-2014-08-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Version 0.3.0 (2014-08-16)")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Changed: sourceMappingURL comments used to be matched only if they appeared\non their own line. However, the spec only says:")]),e._v(" "),o("blockquote",[o("p",[e._v("The generated code may include a line at the end of the source, with the following form:")]),e._v(" "),o("pre",[o("code",[e._v("//# sourceMappingURL=<url>\n")])])]),e._v(" "),o("p",[e._v("So now they are matched also when they appear on the same line as code.")])]),e._v(" "),o("li",[o("p",[e._v("Removed: The "),o("code",[e._v(".set()")]),e._v(" method. I couldnâ€™t decide how it should work\nconsidering the above change. Moreover, it was unnecessarily complex (and\nwould have gotten worse) for very little gain. It is much easier to run\n"),o("code",[e._v(".remove()")]),e._v(" if needed, and then simply "),o("code",[e._v('code += "\\n//# sourceMappingURL=" + url')]),e._v(" (using the appropriate comment syntax and newline). KISS.")])]),e._v(" "),o("li",[o("p",[e._v("Changed: The "),o("code",[e._v(".insertBefore()")]),e._v(" method now always inserts the string exactly\nbefore the sourceMappingURL comment; not before the newline before the\ncomment (if any). Moreover, it does not ensure that the comment will be on a\nnew line anymore. This is up to the caller. KISS.")])]),e._v(" "),o("li",[o("p",[e._v("Changed: The "),o("code",[e._v(".remove()")]),e._v(" method no longer removes the newline before the\nsourceMappingURL (if any).")])]),e._v(" "),o("li",[o("p",[e._v("Changed: Renamed "),o("code",[e._v(".get()")]),e._v(" to "),o("code",[e._v(".getFrom()")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Changed: Renamed "),o("code",[e._v(".remove()")]),e._v(" to "),o("code",[e._v(".removeFrom()")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Added: The "),o("code",[e._v(".existsIn()")]),e._v(" method.")])])]),e._v(" "),o("h3",{attrs:{id:"version-0-2-0-2014-02-23"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#version-0-2-0-2014-02-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Version 0.2.0 (2014-02-23)")]),e._v(" "),o("ul",[o("li",[e._v("Changed: A space is no longer inserted before the closing comment syntax. If\nsuch a space is desired, it needs to be put in the closing comment syntax\nitself (such as "),o("code",[e._v('["/*", " */"]')]),e._v(" instead of "),o("code",[e._v('["/*", "*/"]')]),e._v("). (Backwards\nincompatible change.)")])]),e._v(" "),o("h3",{attrs:{id:"version-0-1-0-2014-02-22"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#version-0-1-0-2014-02-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Version 0.1.0 (2014-02-22)")]),e._v(" "),o("ul",[o("li",[e._v("Initial release.")])])])}],!1,null,null,null);n.default=a.exports}}]);
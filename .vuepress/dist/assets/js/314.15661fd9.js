(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{480:function(e,a,t){"use strict";t.r(a);var n=t(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"buffers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#buffers","aria-hidden":"true"}},[e._v("#")]),e._v(" Buffers")]),e._v(" "),t("p",[e._v("NAN's "),t("code",[e._v("node::Buffer")]),e._v(" helpers exist as the API has changed across supported Node versions. Use these methods to ensure compatibility.")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#api_nan_new_buffer"}},[t("b",[t("code",[e._v("Nan::NewBuffer()")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#api_nan_copy_buffer"}},[t("b",[t("code",[e._v("Nan::CopyBuffer()")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#api_nan_free_callback"}},[t("b",[t("code",[e._v("Nan::FreeCallback()")])])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"api_nan_new_buffer"}})]),e._v(" "),t("h3",{attrs:{id:"nan-newbuffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nan-newbuffer","aria-hidden":"true"}},[e._v("#")]),e._v(" Nan::NewBuffer()")]),e._v(" "),t("p",[e._v("Allocate a new "),t("code",[e._v("node::Buffer")]),e._v(" object with the specified size and optional data. Calls "),t("code",[e._v("node::Buffer::New()")]),e._v(".")]),e._v(" "),t("p",[e._v("Note that when creating a "),t("code",[e._v("Buffer")]),e._v(" using "),t("code",[e._v("Nan::NewBuffer()")]),e._v(" and an existing "),t("code",[e._v("char*")]),e._v(", it is assumed that the ownership of the pointer is being transferred to the new "),t("code",[e._v("Buffer")]),e._v(" for management.\nWhen a "),t("code",[e._v("node::Buffer")]),e._v(" instance is garbage collected and a "),t("code",[e._v("FreeCallback")]),e._v(" has not been specified, "),t("code",[e._v("data")]),e._v(" will be disposed of via a call to "),t("code",[e._v("free()")]),e._v(".\nYou "),t("em",[e._v("must not")]),e._v(" free the memory space manually once you have created a "),t("code",[e._v("Buffer")]),e._v(" in this way.")]),e._v(" "),t("p",[e._v("Signature:")]),e._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Nan::MaybeLocal<v8::Object> Nan::NewBuffer(uint32_t size)\nNan::MaybeLocal<v8::Object> Nan::NewBuffer(char* data, uint32_t size)\nNan::MaybeLocal<v8::Object> Nan::NewBuffer(char *data,\n                                           size_t length,\n                                           Nan::FreeCallback callback,\n                                           void *hint)\n")])])]),t("p",[t("a",{attrs:{name:"api_nan_copy_buffer"}})]),e._v(" "),t("h3",{attrs:{id:"nan-copybuffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nan-copybuffer","aria-hidden":"true"}},[e._v("#")]),e._v(" Nan::CopyBuffer()")]),e._v(" "),t("p",[e._v("Similar to "),t("a",{attrs:{href:"#api_nan_new_buffer"}},[t("code",[e._v("Nan::NewBuffer()")])]),e._v(" except that an implicit memcpy will occur within Node. Calls "),t("code",[e._v("node::Buffer::Copy()")]),e._v(".")]),e._v(" "),t("p",[e._v("Management of the "),t("code",[e._v("char*")]),e._v(" is left to the user, you should manually free the memory space if necessary as the new "),t("code",[e._v("Buffer")]),e._v(" will have its own copy.")]),e._v(" "),t("p",[e._v("Signature:")]),e._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Nan::MaybeLocal<v8::Object> Nan::CopyBuffer(const char *data, uint32_t size)\n")])])]),t("p",[t("a",{attrs:{name:"api_nan_free_callback"}})]),e._v(" "),t("h3",{attrs:{id:"nan-freecallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nan-freecallback","aria-hidden":"true"}},[e._v("#")]),e._v(" Nan::FreeCallback()")]),e._v(" "),t("p",[e._v("A free callback that can be provided to "),t("a",{attrs:{href:"#api_nan_new_buffer"}},[t("code",[e._v("Nan::NewBuffer()")])]),e._v(".\nThe supplied callback will be invoked when the "),t("code",[e._v("Buffer")]),e._v(" undergoes garbage collection.")]),e._v(" "),t("p",[e._v("Signature:")]),e._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef void (*FreeCallback)(char *data, void *hint);\n")])])])])}],!1,null,null,null);a.default=r.exports}}]);